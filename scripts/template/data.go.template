package {{.Dir}}

import (
	"errors"

	"github.com/sirupsen/logrus"
	"gorm.io/gorm"

	"gitlab.top.slotssprite.com/br_h5slots/server/merchant/internal/data/conn"
	"gitlab.top.slotssprite.com/br_h5slots/server/merchant/internal/data/po"
	"gitlab.top.slotssprite.com/br_h5slots/server/merchant/internal/logic/dto"
)

func New{{.DbStructName}}Data() *{{.DbStructName}}Data {
	return &{{.DbStructName}}Data{}
}

type {{.DbStructName}}Data struct {
}

func (s {{.DbStructName}}Data) List() ([]*po.{{.DbStructName}}, error) {
	list := make([]*po.{{.DbStructName}}, 0)
	err := conn.GetMerchantDB().Find(&list).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logrus.Errorf("{{.DbStructName}}Data List Err: %s", err.Error())
		return nil, err
	}
	return list, nil
}

func (s {{.DbStructName}}Data) ListByPage(page *dto.Pagination) ([]*po.{{.DbStructName}}, error) {
	list := make([]*po.{{.DbStructName}}, 0)
	err := conn.GetMerchantDB().Offset(page.GetOffset()).Limit(page.GetPageSize()).Find(&list).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logrus.Errorf("{{.DbStructName}}Data List Err: %s", err.Error())
		return nil, err
	}
	return list, nil
}

func (s {{.DbStructName}}Data) ListCount() (int64, error) {
	num := int64(0)
	err := conn.GetMerchantDB().Model(&po.{{.DbStructName}}{}).Count(&num).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logrus.Errorf("{{.DbStructName}}Data List Err: %s", err.Error())
		return num, err
	}
	return num, nil
}

func (s {{.DbStructName}}Data) Info(id int64) (*po.{{.DbStructName}}, error) {
	info := &po.{{.DbStructName}}{}
	err := conn.GetMerchantDB().First(info, "id = ?", id).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logrus.Errorf("{{.DbStructName}}Data Info Err: %s", err.Error())
		return nil, err
	}
	return info, nil
}

func (s {{.DbStructName}}Data) Add({{.ParamName}} *po.{{.DbStructName}}) error {
    {{.ParamName}}.Id = 0
	err := conn.GetMerchantDB().Model(&po.{{.DbStructName}}{}).Create({{.ParamName}}).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logrus.Errorf("{{.DbStructName}}Data Add Err: %s", err.Error())
		return err
	}
	return nil
}

func (s {{.DbStructName}}Data) Edit({{.ParamName}} *po.{{.DbStructName}}) error {
	err := conn.GetMerchantDB().Model(&po.{{.DbStructName}}{}).Where("id = ?", {{.ParamName}}.Id).Updates({{.ParamName}}).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logrus.Errorf("{{.DbStructName}}Data Edit Err: %s", err.Error())
		return err
	}
	return nil
}

func (s {{.DbStructName}}Data) Delete({{.ParamName}} *po.{{.DbStructName}}) error {
	err := conn.GetMerchantDB().Where("id = ?", {{.ParamName}}.Id).Delete({{.ParamName}}).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logrus.Errorf("{{.DbStructName}}Data Delete Err: %s", err.Error())
		return err
	}
	return nil
}
